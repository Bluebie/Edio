Thoughts on a rich document editor for the web.

Dougall brought up formatting at the point of insertion - looking to the formatting bar to check which formatting state you are in is an expensive and distracting operation, causing many to simply type an experiment to see what happens, then try and correct it by creative backspacing. This could perhaps be solved by moving this state display to the cursor itself. A tiny bubble above the vertical bar could communicate with a single formatted character, when non-normal formatting is enabled, what it will look like. This would also provide a loupe through which one could inspect whitespace to see where formatting starts and ends.

On implementations: By converting formatted paragraph data in to pairs of plaintext and formatting ranges, text can be represented both in a hidden textarea, and directly as html. The user could select text with the mouse by selecting the html directly, and scripting could transfer that selection in to the textarea when complete. Creative application of CSS would allow the synthetic replacement and the browser-native selections to look identical. Selection and cursor navigation by keyboard would work in the text area, and the synthetic cursor and selection would be updated in the html as the textarea state changes.

On selection and pasteboard, and draging: Hooking oncopy, oncut events on the textarea would let us add a JSON representation to the plaintext copied in to clipboard with the event.clipboardData.addData API available in (at least) Safari. Similar APIs exist in Internet Explorer. onpaste can be hooked to get this JSON representation and import it directly in favour of any plaintext - causing the textarea's soon to be changed state to be ignored, inserting the json where the synthetic cursor is, and updating the textarea from that. Similarly, drag and drop text operations can be supported using browser-native drag and drop apis to add a JSON representation to the drag-data, and decoding it when dropped anywhere on the html view.

Text entry would need to be fluid enough to allow the revision of the character to the left of the cursor, as platforms like Mac OS allow the entry of characters using a sequence of one or two keypresses, where an original character is replaced with it's varient once a compatible second key is pressed and the cursor is placed after it. The OS handles this transparently in the textarea - we only need to respect the update.

Objects like images or plugins could be activated by clicking on them, or by moving the synthetic cursor in to their middle - these sorts of objects would be represented by two placeholder characters in the textarea - characters the object's interface would expose to the editor on demand. If the cursor is between the object's two characters, it would be considered 'active', and the object would be free to step in and take further control of the keyboard.
